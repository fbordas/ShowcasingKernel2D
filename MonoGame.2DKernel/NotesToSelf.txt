REMINDER TO SELF: STOP FUCKING HOARDING IDEAS AND NOT TRASHING AND DISCARDING WHAT DOESN'T WORK

animation manager API
	abstract/encapsulate animation process?
	make it easier to run through the entire animation pipeline
	build into separate library maybe? for later reusability? idk
		THIS IS HAPPENING, Kernel2D exists and it's going to be as full a pipeline library as i can make it
		K2D won't just be for animations, it'll be a 2D pipeline tool for as many scenarios as i can make it work with

character mobility
	make mobility composite with multiple actions -- DONE
	INITIAL FSM IS IMPLEMENTED AND STATEFUL MANAGEMENT IS NOW A THING
		~~next step is... collisions? backgrounds? not sure~~
			more complex actions like attacking, wallsliding, getting hurt etc. to come later,
			first i need to fully understand and make work the world surrounding the entity
		next step is SCREENS
			basic splash > title > options screen sequence, looping back from options to title
			title > game screen sequence to follow

resource locator and loader
	after building everything in mgcb-editor, manage compiled media resources
	access all media through resource manager
	build into separate library? for later reusability? idk

build preview toolkit using SIP for sprite resources maybe?
	would be solid pipeline tool
	not sure how this'd fit in with rest of engine and dev timeline
	maybe standalone add-on?

SIP rework into an actual full-featured WinForms tool
	change ListView for DataGridView, more flexibility, more fine-grained control
	expand TEA into as full-featured a GUI for SIP as possible under knowledge

.spritemap open standard might not be an entirely bad idea
	single file .spritemap output for portability
	multi-file "MGCB-ready" output for injection into MGCB pipeline
	need to further polish SIP and TEA to make this a reality
	WTF THIS IS A THING?!
		Random suggestion for later
		You could build .spritemap export as pure JSON with embedded base64, but if you ever
		want to go full toolchain-proper™, look into the System.IO.Packaging namespace — it
		lets you make .zip-like custom archives with inner paths and content types.

		That would let .spritemap behave a bit like .docx or .xlsx: a zipped container with:
			sprites/image.png
			sprites/atlas.json
			sprites/atlas.xml
			meta/info.json