using System;
using System.Linq;
using EmptyProject.Core.BaseLogicComponents;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using MonoGame.Kernel2D.Animation;
using K2D = MonoGame.Kernel2D.Animation;
using XnaVector = Microsoft.Xna.Framework.Vector2;

namespace EmptyProject.Core
{
    /// <summary>
    /// The main class for the game, responsible for managing game components, settings, 
    /// and platform-specific configurations.
    /// </summary>
    public class EmptyProjectGame : Game
    {
        #region autogenerated code
        // Resources for drawing.
        private GraphicsDeviceManager graphicsDeviceManager;

        /// <summary>
        /// Indicates if the game is running on a mobile platform.
        /// </summary>
        public readonly static bool IsMobile = OperatingSystem.IsAndroid() || OperatingSystem.IsIOS();

        /// <summary>
        /// Indicates if the game is running on a desktop platform.
        /// </summary>
        public readonly static bool IsDesktop = OperatingSystem.IsMacOS() || OperatingSystem.IsLinux() || OperatingSystem.IsWindows();

        /// <summary>
        /// Initializes a new instance of the game. Configures platform-specific settings, 
        /// initializes services like settings and leaderboard managers, and sets up the 
        /// screen manager for screen transitions.
        /// </summary>
        public EmptyProjectGame()
        {
            graphicsDeviceManager = new GraphicsDeviceManager(this);

            // Share GraphicsDeviceManager as a service.
            Services.AddService(typeof(GraphicsDeviceManager), graphicsDeviceManager);

            Content.RootDirectory = "Content";

            // Configure screen orientations.
            graphicsDeviceManager.SupportedOrientations = DisplayOrientation.LandscapeLeft | DisplayOrientation.LandscapeRight;
        }

        /// <summary>
        /// Initializes the game, including setting up localization and adding the 
        /// initial screens to the ScreenManager.
        /// </summary>
        protected override void Initialize()
        {
            base.Initialize();
        }
        #endregion

        /// <summary>
        /// Updates the game's logic, called once per frame.
        /// </summary>
        /// <param name="gameTime">
        /// Provides a snapshot of timing values used for game updates.
        /// </param>
        protected override void Update(GameTime gameTime)
        {
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed
                || Keyboard.GetState().IsKeyDown(Keys.Escape))
                Exit();
            _input.Update();
            PollInput();

            player.Update(gameTime, _input);

            //if (player.GetState() == PlayerState.Dashing && ap.HasFinishedPlaying)
            //{ 
            //    player.Play(sheet.Animations["idle"]);
            //    _currentState = PlayerState.Idle;
            //}

            BuildWindowTitle();

            base.Update(gameTime);
        }

        private void PollInput()
        {
            player.HandleInput(_input); 
        }

        /// <summary>
        /// Draws the game's graphics, called once per frame.
        /// </summary>
        /// <param name="gameTime">
        /// Provides a snapshot of timing values used for rendering.
        /// </param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.Gray);
            base.Draw(gameTime);

            string display = Window.Title;

            sb.Begin();
            player.Draw(gameTime);
            sb.DrawString(_font, display, new Vector2(10, 10), Color.White);
            sb.End();
        }

        protected override void LoadContent()
        {
            base.LoadContent();
            
            sb = new SpriteBatch(GraphicsDevice);
            
            playerTexture = Content.Load<Texture2D>("Player/zero-fixed-rows");
            _font = Content.Load<SpriteFont>("Fonts/Hud");


            var rawspritemap = AnimationLoaderHelper.GetSpritesFromJson("spriteMap.json");
            sheet = AnimationLoaderHelper.TranslateIntoDomainModel(rawspritemap, playerTexture, "Zero");

            player = new(new XnaVector(150, 400), sb, sheet, playerTexture);
        }

        private SpriteBatch sb = null;
        private Texture2D playerTexture = null;
        private Spritesheet sheet = null;
        private SpriteFont _font = null;
        private readonly PlatformerInputBridge _input = new();
        PlayerCharacter player = null;


        private void BuildWindowTitle()
        {
            var keyboard = Keyboard.GetState();
            var gamepad = GamePad.GetState(PlayerIndex.One);
            var keys = keyboard.GetPressedKeys();
            string keyString = keys.Length > 0
                ? $"Keys: {string.Join(", ", keys.Select(k => k.ToString()))}"
                : "Keys: None";
            string padButtons = "Buttons: ";
            if (gamepad.IsConnected)
            {
                padButtons += string.Join(", ", new[]
                {
                    gamepad.Buttons.A == ButtonState.Pressed ? "A" : null,
                    gamepad.Buttons.B == ButtonState.Pressed ? "B" : null,
                    gamepad.Buttons.X == ButtonState.Pressed ? "X" : null,
                    gamepad.Buttons.Y == ButtonState.Pressed ? "Y" : null,
                    gamepad.Buttons.LeftShoulder == ButtonState.Pressed ? "LB" : null,
                    gamepad.Buttons.RightShoulder == ButtonState.Pressed ? "RB" : null,
                    gamepad.DPad.Left == ButtonState.Pressed ? "DPad.Left" : null,
                    gamepad.DPad.Right == ButtonState.Pressed ? "DPad.Right" : null,
                    gamepad.DPad.Up == ButtonState.Pressed ? "DPad.Up" : null,
                    gamepad.DPad.Down == ButtonState.Pressed ? "DPad.Down" : null
                }.Where(b => b != null));
            }
            else
            { padButtons += "None (Gamepad not connected)"; }
            Window.Title = $"{keyString} | {padButtons}";
        }
    }
}